(fn [board]
  (if (and (not= :e (first (first board))) (apply = (first board)))
    (first (first board))
    (if (and (not= :e (first (second board))) (apply = (second board)))
      (first (second board))
      (if (and (not= :e (first (last board))) (apply = (last board)))
        (first (last board))
        (if (and (not= :e (first (first board))) (= (first (first board)) (first (second board)) (first (last board))))
          (first (first board))
          (if (and (not= :e (second (first board))) (= (second (first board)) (second (second board)) (second (last board))))
            (second (first board))
            (if (and (not= :e (last (first board))) (= (last (first board)) (last (second board)) (last (last board))))
              (last (first board))
              (if (and (not= :e (first (first board))) (= (first (first board)) (second (second board)) (last (last board))))
                (first (first board))
                (if (and (not= :e (last (first board))) (= (last (first board)) (second (second board)) (first (last board))))
                  (last (first board))
                  nil)))))))))